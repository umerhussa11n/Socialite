<?phpclass HomeController extends BaseController {	private $fb, $fb_error;                function _get_video_attributes($video) {                                $command = 'ffmpeg -i "' . $video . '" -vstats 2>&1';                    $output = shell_exec($command);                    $regex_sizes = "/Video: ([^,]*), ([^,]*), ([0-9]{1,4})x([0-9]{1,4})/"; // or : $regex_sizes = "/Video: ([^\r\n]*), ([^,]*), ([0-9]{1,4})x([0-9]{1,4})/"; (code from @1owk3y)                    if (preg_match($regex_sizes, $output, $regs)) {                        $codec = $regs [1] ? $regs [1] : null;                        $width = $regs [3] ? $regs [3] : null;                        $height = $regs [4] ? $regs [4] : null;                    }                    $regex_duration = "/Duration: ([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}).([0-9]{1,2})/";                    if (preg_match($regex_duration, $output, $regs)) {                        $hours = $regs [1] ? $regs [1] : null;                        $mins = $regs [2] ? $regs [2] : null;                        $secs = $regs [3] ? $regs [3] : null;                        $ms = $regs [4] ? $regs [4] : null;                    }                    return array('codec' => $codec,                        'width' => $width,                        'height' => $height,                        'hours' => $hours,                        'mins' => $mins,                        'secs' => $secs,                        'ms' => $ms                    );                }                        public function getFBVideo()        {            $post_id = Input::get('v_id');            $this->checkFB();                        $post = $this->fb->getPostInfo($post_id, 'video');            //echo '<pre>';            //print_r($post);                        $final = $this->_get_video_attributes($post['source']);                        $final['video_url'] = $post['source'];            echo json_encode($final);            //echo 'http://social.softsengine.com/ffmpeg/ee.mp4';            exit();        }                        public function getInstagramVideo()        {            $post_id = Input::get('v_id');            $feed = InstagramHelper::getFeed($post_id);//            echo '<pre>';//            print_r($feed);//            exit();                        $final = $this->_get_video_attributes($feed['video']);                        $final['video_url'] = $feed['video'];            echo json_encode($final);            //echo 'http://social.softsengine.com/ffmpeg/ee.mp4';            exit();        }        public function getTwitterVideo()        {            $post_id = Input::get('v_id');            $feed = TwitterHelper::getTweet($post_id);//            echo '<pre>';//            print_r($feed);//            exit();                        $final = $this->_get_video_attributes($feed['video']);                        $final['video_url'] = $feed['video'];            echo json_encode($final);            //echo 'http://social.softsengine.com/ffmpeg/ee.mp4';            exit();        }	public function checkFB(){		$this->fb_error = false;		$app_id = Auth::user()->app_id;		$app_secret = Auth::user()->app_secret;		$fb = true;		try {	                    			$fb = new FacebookHelper($app_id, $app_secret);		} catch (Exception $e) {			$this->fb_error = true;						}				$this->fb = $fb;	}		public function getOwnAndFollowPages(){		$facebook_follows = Follow::where('user_id', Auth::id())->get();		$twitter_follows = FollowTwitters::where('user_id', Auth::id())->get();		$instagram_follows = FollowInstagrams::where('user_id', Auth::id())->get();				$follows = array();				foreach ($facebook_follows as $facebook_follow)		{			$follows['f-' . $facebook_follow->id] = 'Facebook: ' . $facebook_follow->name;		}				foreach ($twitter_follows as $twitter_follow)		{			$follows['t-' . $twitter_follow->id] = 'Twitter: ' . $twitter_follow->name . " ($twitter_follow->screen_name)";		}				foreach ($instagram_follows as $instagram_follow)		{			$follows['i-' . $instagram_follow->id] = 'Instagram: ' . $instagram_follow->full_name . " ($instagram_follow->username)";		}				if (count($follows) <= 0) {			return Redirect::to('pages-list');		}				$facebooks = Pages::where('user_id', Auth::id())->get();		$twitters = Twitters::where('user_id', Auth::id())->get();		$instagrams = Instagrams::where('user_id', Auth::id())->get();				$pages = array();				foreach ($facebooks as $facebook)		{			$pages['f-' . $facebook->id] = 'Facebook: ' . $facebook->name;		}				foreach ($twitters as $twitter)		{			$pages['t-' . $twitter->id] = 'Twitter: ' . $twitter->name . " ($twitter->screen_name)";		}				foreach ($instagrams as $instagram)		{			$pages['i-' . $instagram->id] = 'Instagram: ' . $instagram->full_name . " ($instagram->username)";		}				return compact('follows', 'pages');	}	public function showFacebookContent($page_id = null, $type = null)	{                                    		$this->checkFB();				if ($this->fb_error) {			return Redirect::to('settings/apps-settings?settings=invalid');		}				/* check if any pages are added */		$of = $this->getOwnAndFollowPages();		$_id = explode('-', $page_id);				$id = (isset($_id[1]) && $_id[1] > 0) ?  $_id[1] : $page_id;                                $user_id = Auth::id();  		$libraries = Tbllibrary::where(['is_active' => 1, 'user_id' => $user_id])->take(1000)->get();                //                echo '<pre>';//                print_r($libraries);//                exit();		if(!is_numeric($id) || empty($id) || ($type == null)){			$page = Follow::where('user_id', Auth::id())->first();                        if($page)                        {                            $page_id = $page->id;                            $type = 'posts';                            return Redirect::to('facebook/f-'.$page_id.'/'.$type);                        }                        else                        {                            $page = FollowTwitters::where('user_id', Auth::id())->first();                            if($page)                            {                                $page_id = $page->id;                                $type = 'posts';                                return Redirect::to('twitter/t-'.$page_id.'/'.$type);                            }                            else                            {                                $page = FollowInstagrams::where('user_id', Auth::id())->first();                                if($page)                                {                                    $page_id = $page->id;                                    $type = 'posts';                                    return Redirect::to('instagram/i-'.$page_id.'/'.$type);                                }                            }                        }		}				$page = Follow::where('id', $id)->first();		if ($page)		{			$posts = $this->fb->getPosts($page, $type);												$unpublished = false;			if(! isset($posts['data'])){				$unpublished = true;				$posts['data'] = array();			}						foreach($posts['data'] as $i => $post)			{				if ( isset($_GET['opt']) && trim($_GET['opt']) !== '' && isset($post->likes->summary->total_count) )				{					$opts = explode('_', trim($_GET['opt']));										if ( in_array($opts[0], array('<', '>')) && $opts[1] >= 0 )					{						if ($opts[0] == '>')						{							if ($post->likes->summary->total_count < $opts[1])							{								unset($posts['data'][$i]);							}						} else						{							if ($post->likes->summary->total_count > $$opts[1])							{								unset($posts['data'][$i]);							}						}					}				}			}						$partition = $posts['data'];										$partition = partition($partition, 6);			if (isset($posts['paging']->previous)) {				$previous = $this->getToken($posts['paging']->previous);							} else {				$previous = 'none';											}						if (isset($posts['paging']->next)) {				$next = $this->getToken($posts['paging']->next);							} else {				$next = 'none';											}						$follow_page_id = $page->page_id;						return View::make('home_facebook', compact('libraries', 'partition','of','page_id','type','unpublished','next','previous','follow_page_id'));		} else		{			return Redirect::to('pages-list');		}		}		public function showTwitterContent($page_id = null)	{				/* check if any pages are added */		$of = $this->getOwnAndFollowPages();				$_id = explode('-', $page_id);				$id = (isset($_id[1]) && $_id[1] > 0) ?  $_id[1] : $page_id;		$user_id = Auth::id();  		$libraries = Tbllibrary::where(['is_active' => 1, 'user_id' => $user_id])->take(1000)->get();		if(!is_numeric($id) || empty($id)){			$page = FollowTwitters::where('user_id', Auth::id())->first();			$page_id = $page->id;			return Redirect::to('twitter/'.$page_id);		}		$page = FollowTwitters::where('id', $id)->first();		if ($page)		{			$twitter = Twitters::where('user_id', Auth::id())->first();			if ($twitter)			{				$max_id = false;				$partition = [];				$data = [];							Twitter::reconfig([					'consumer_key' => $twitter->consumer_key,					'consumer_secret' => $twitter->consumer_secret,					'token' => $twitter->access_token,					'secret' => $twitter->access_token_secret,				]);							$tweets = json_decode(Twitter::getUserTimeline(['screen_name' => $page->screen_name, 'count' => 21, 'format' => 'json']), true);				foreach($tweets as $tweet)				{					if ( isset($_GET['opt']) && trim($_GET['opt']) !== '' && isset($tweet['favorite_count']) )					{						$opts = explode('_', trim($_GET['opt']));												if ( in_array($opts[0], array('<', '>')) && $opts[1] >= 0 )						{							if ($opts[0] == '>')							{								if ($tweet['favorite_count'] < $opts[1])								{									continue;								}							} else							{								if ($tweet['favorite_count'] > $$opts[1])								{									continue;								}							}						}					}										//$embed = json_decode(Twitter::getOembed(['id' => $tweet['id'], 'format' => 'json', 'omit_script' => 1, 'maxwidth' => 350]), true);										$type = 'status';										if (isset($tweet['extended_entities']['media'][0]['video_info']['variants']))					{						$type = 'video';					} elseif (isset($tweet['extended_entities']['media'][0]['media_url']))					{						$type = 'photo';					} elseif (isset($tweet['entities']['urls'][0]['expanded_url']))					{						$type = 'link';					}										$link = 'https://twitter.com/' . $tweet['user']['screen_name'] . '/status/' . $tweet['id'];					$data[] = [						'id' => $tweet['id'],						'text' => $tweet['text'],						'type' => $type,						'link' => $link,						'embed' => isset($embed['html']) ? $embed['html'] : ('<blockquote class="twitter-tweet" data-lang="en" data-width="350"><a href="' . $link . '"></a></blockquote>'),					];				}							if (!empty($data))				{					$end = end($data);										$partition = partition($data, 3);										$max_id = $end['id'] - 1;										Session::put('twitter_page', 1);					Session::put('twitter_max_id1', $data[0]['id']);				}								return View::make('home_twitter', compact('libraries', 'partition', 'of', 'page_id', 'max_id'));			}						return Redirect::to('settings/apps-settings?settings=invalid');		} 				return Redirect::to('pages-list');	}		public function showInstagramContent($page_id = null)	{				/* check if any pages are added */		$of = $this->getOwnAndFollowPages();				$_id = explode('-', $page_id);				$id = (isset($_id[1]) && $_id[1] > 0) ?  $_id[1] : $page_id;		$user_id = Auth::id();  		$libraries = Tbllibrary::where(['is_active' => 1, 'user_id' => $user_id])->take(1000)->get();		if(!is_numeric($id) || empty($id)){			$page = FollowInstagrams::where('user_id', Auth::id())->first();			$page_id = $page->id;			return Redirect::to('instagram/'.$page_id);		}		$page = FollowInstagrams::where('id', $id)->first();		if ($page)		{			$instagram_user = Instagrams::where('user_id', Auth::id())->first();						if ($instagram_user)			{				$instagram = InstagramHelper::getInstance($instagram_user->username, $instagram_user->password);// echo '<pre>';// print_r($instagram_user);// 				echo '111111'; exit();				if ($instagram)				{					try {						$max_id = false;						$partition = [];						$data = [];									$userFeed = $instagram->getUserFeed($page->owner_id);						foreach($userFeed->getItems() as $feedItem){							$likeCount = $feedItem->getLikeCount();														if ( isset($_GET['opt']) && trim($_GET['opt']) !== '' )							{								$opts = explode('_', trim($_GET['opt']));																if ( in_array($opts[0], array('<', '>')) && $opts[1] >= 0 )								{									if ($opts[0] == '>')									{										if ($likeCount < $opts[1])										{											continue;										}									} else									{										if ($likeCount > $$opts[1])										{											continue;										}									}								}							}							$type = 'photo';												if (!empty($feedItem->getVideoVersions()))							{								$type = 'video';							}														$link = 'https://instagram.com/p/' . $feedItem->getCode();							$data[] = [								'id' => $feedItem->getPk(),								'text' => empty($feedItem->getCaption()) ? '' : $feedItem->getCaption()->getText(),								'type' => $type,								'link' => $link,								'embed' => '<blockquote class="instagram-media" data-instgrm-captioned data-instgrm-version="7" style="width:350px"><a href="' . $link . '"></a></blockquote>',							];						}												if (!empty($data))						{							$end = end($data);														$partition = partition($data, 3);														$max_id = $end['id'];														Session::put('instagram_page', 1);							Session::put('instagram_max_id1', 0);						}												return View::make('home_instagram', compact('libraries','partition', 'of', 'page_id', 'max_id'));					} catch(Exception $e){						return $e->getMessage();					}				}			}						return Redirect::to('settings/apps-settings?settings=invalid');		}				return Redirect::to('pages-list');	}        public function recordScheduler($p, $post_type, $media_type, $status, $schedule_time)        {            Schedulers::create([				'scheduled_' => $p,                                'media_type_' => $media_type,                                'post_type_' => $post_type,                                'status_' => $status,                                'sch_time_' => $schedule_time			]);        }	// posting content	public function postContent(){				$_page_id = explode('-', Input::get('page_id'));				$page_id = isset($_page_id[1]) ? $_page_id[1] : Input::get('page_id');				$post_id = Input::get('post_id');		$type = Input::get('type');				$status = Input::get('status');					$schedule_time = Input::get('schedule_time');					$timestamp = 0;		/* checking schedule time setting */		if (Auth::user()->timezone == ''){			return 'schedule_time';		}				if ($_page_id[0] == 't')		{			$twitter = Twitters::where('user_id', Auth::id())->first();						if ($twitter)			{				$this->checkFB();								if ($this->fb_error) {					return 'error|Could not access base Facebook account.';				}								$post = $this->fb->getPostInfo($post_id, $type);								Twitter::reconfig([					'consumer_key' => $twitter->consumer_key,					'consumer_secret' => $twitter->consumer_secret,					'token' => $twitter->access_token,					'secret' => $twitter->access_token_secret,				]);                                    //                             echo '<pre>';    //                             print_r([				// 	'consumer_key' => $twitter->consumer_key,				// 	'consumer_secret' => $twitter->consumer_secret,				// 	'token' => $twitter->access_token,				// 	'secret' => $twitter->access_token_secret,				// ]);    //                             exit();                                //                                print_r([//					'consumer_key' => $twitter->consumer_key,//					'consumer_secret' => $twitter->consumer_secret,//					'token' => $twitter->access_token,//					'secret' => $twitter->access_token_secret,//				]);						if ($type == 'status')				{					$twitter_status = $status;				} elseif ($type == 'link')				{					$twitter_status = $status . PHP_EOL . $post['link'];				}                                 elseif ($type == 'video')				{                                    //nimesh				$twitter_status = $status . PHP_EOL . $post['source'];                                                                        echo '<pre>';                                    print_r($post);                                                                        try {                                                                                $cut_video_url = Input::get('cut_video_url');                                        //echo '<pre>';                                        //echo $cut_video_url;                                        $post['source'] = $cut_video_url;                                        print_r($post);                                                                                $post['source'] = str_replace("&", "||", $post['source']);                                        $twitter_api_url = url('/ffmpeg/twitter_video_upload.php?');                                        $twitter_api_url .= "tw_key=".$twitter->consumer_key."&";                                        $twitter_api_url .= "tw_secret=".$twitter->consumer_secret."&";                                        $twitter_api_url .= "tw_token=".$twitter->access_token."&";                                        $twitter_api_url .= "tw_token_secret=".$twitter->access_token_secret."&";                                        $twitter_api_url .= "v_url=".$post['source']."&";                                        $twitter_api_url .= "status=".urlencode($status);                                        //$instagram_api_url = ($instagram_api_url);                                        echo '==='.$twitter_api_url.'<br/>';                                        //exit();                                        //$content_x = file_get_contents($instagram_api_url);                                        $ch = curl_init($twitter_api_url);                                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                                        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Accept: application/json'));                                        $content_x = curl_exec($ch);                                        curl_close($ch);                                        //echo '<br/>===='.$content_x;                                        $arx = json_decode($content_x);                                        //echo '<pre>';                                        //print_r($arx);                                        try                                        {                                            if($arx->status == 'fail')                                            {                                                echo 'error|' . $arx->message;                                            }                                        }                                        catch(Exception $e){}                                        exit();                                                                                //						$uploaded_media = Twitter::uploadMedia(['media' => @file_get_contents($post['source'])]);////                                                ////                                                echo '<pre>';////                                                print_r($uploaded_media);//                                                ////                                                echo '</pre>';////                                                ////						$xv = Twitter::postTweet(['format' => 'json', 'status' => $status, 'media_ids' => $uploaded_media->media_id_string]);////                                                ////                                                //nimesh here...////                                                echo '<pre>';////                                                print_r($xv);////                                                echo '</pre>';                                                                                                return $xv;					} catch (Exception $e)					{						return 'error|v|' . $e->getMessage();					}				}                                 elseif ($type == 'photo')				{					try {						$uploaded_media = Twitter::uploadMedia(['media' => @file_get_contents($post['full_picture'])]);						return Twitter::postTweet(['format' => 'json', 'status' => $status, 'media_ids' => $uploaded_media->media_id_string]);					} catch (Exception $e)					{						return 'error|' . $e->getMessage();					}				}								try {					return Twitter::postTweet(['status' => $twitter_status, 'format' => 'json']);				} catch (Exception $e)				{					return 'error|' . $e->getMessage();				}			}		} elseif ($_page_id[0] == 'i')		{			$instagram_user = Instagrams::where('user_id', Auth::id())->first();						if ($instagram_user)			{				$instagram = InstagramHelper::getInstance($instagram_user->username, $instagram_user->password);								if ($instagram)				{					try {                        $this->checkFB();                        if ($this->fb_error) {                            return 'error|Could not access base Facebook account.';                        }						$post = $this->fb->getPostInfo($post_id, $type);// nimesh                                                //                                                echo '<pre>';//                                                print_r($post);//                                                echo '</pre>';                                                							if ($type == 'video')                                                        {                                                                                                                        $cut_video_url = Input::get('cut_video_url');                                                            //echo '<pre>';                                                            //echo $cut_video_url;                                                            $post['source'] = $cut_video_url;                                                            //print_r($post);                                                            //exit();                                                                                                                        $post['full_picture'] = str_replace("&", "||", $post['full_picture']);                                                            $post['source'] = str_replace("&", "||", $post['source']);                                                                                                                        $instagram_api_url = url('/iitest/upload.php?');                                                            $instagram_api_url .= "uxname=".$instagram_user->username."&";                                                            $instagram_api_url .= "uxpwd=".$instagram_user->password."&";                                                            $instagram_api_url .= "thmbx=".$post['full_picture']."&";                                                            $instagram_api_url .= "vidx=".$post['source']."&";                                                            $instagram_api_url .= "statusx=".urlencode($status);                                                                                                                        //$instagram_api_url = ($instagram_api_url);                                                            echo '==='.$instagram_api_url.'<br/>';                                                            //$content_x = file_get_contents($instagram_api_url);                                                            $ch = curl_init($instagram_api_url);                                                            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                                                            curl_setopt($ch, CURLOPT_HTTPHEADER, array('Accept: application/json'));                                                            $content_x = curl_exec($ch);                                                            curl_close($ch);                                                                                                                        echo '<br/>===='.$content_x;                                                            $arx = json_decode($content_x);                                                            //echo '<pre>';                                                            //print_r($arx);                                                            try                                                            {                                                                if($arx->status == 'fail')                                                                {                                                                    echo 'error|' . $arx->message;                                                                }                                                            }                                                            catch(Exception $e){}                                                            exit();                                                                                                                    }                                                						if ($type == 'photo' || $type == 'link')						{                                                                                                        echo '<pre>';                                                    print_r($post);                                                                                                        $post['full_picture'] = str_replace("&", "||", $post['full_picture']);                                                                                                       $instagram_api_url = url('/iitest/upload_photo.php?');                                                    $instagram_api_url .= "uxname=".$instagram_user->username."&";                                                    $instagram_api_url .= "uxpwd=".$instagram_user->password."&";                                                    $instagram_api_url .= "thmbx=".$post['full_picture']."&";                                                    $instagram_api_url .= "statusx=".urlencode($status);                                                    //$instagram_api_url = ($instagram_api_url);                                                    echo '==='.$instagram_api_url.'<br/>';                                                    //$content_x = file_get_contents($instagram_api_url);                                                    $ch = curl_init($instagram_api_url);                                                    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                                                    curl_setopt($ch, CURLOPT_HTTPHEADER, array('Accept: application/json'));                                                    $content_x = curl_exec($ch);                                                    curl_close($ch);                                                    echo '<br/>===='.$content_x;                                                    $arx = json_decode($content_x);                                                    //echo '<pre>';                                                    //print_r($arx);                                                    try                                                    {                                                        if($arx->status == 'fail')                                                        {                                                            echo 'error|' . $arx->message;                                                        }                                                    }                                                    catch(Exception $e){}                                                    exit();                                                                                                        							$tmpfile = tempnam(storage_path(), 'ins');                                                        $tmpfile = $tmpfile.'.jpg';                                                        $handle = fopen($tmpfile, "wb");                                                        $vidx = $this->get_data($post['full_picture'], $handle);                                                        $saved = fwrite($handle, $vidx);                                                        fclose($handle);							//$saved = file_put_contents($tmpfile, file_get_contents($post['full_picture']));                                                                                                                echo $tmpfile.'<br/>'.$post['full_picture'].'<br/>';                                                                                                                echo $tmpfile.'<br/>http://social.softsengine.com/'.$tmpfile.'<br/>';                                                        //$saved = file_put_contents($tmpfile, fopen($post['full_picture'], 'r'));                                                        echo '<br/>'.$saved.'<br/>';                                                        if($type == 'link')                                                        {                                                            //$status = '<a href="'.$post['link'].'">'.$status.'</a>';                                                                                                                    }                                                        							if ($saved)							{								$result = $instagram->postPhoto($tmpfile, $status);                                                                //                                                                echo '<pre>';//                                                                print_r($result);//                                                                print_r($post);//                                                                echo '</pre>';//                                                                exit();                                                                								//Media from Result								//$media = $result->getMedia();								//Get the Images on Instagram for this Uploaded Media								//$images = $media->getImageVersions2()->getCandidates();								//dd($images);							}						}					} catch(Exception $e){						return 'error|i|' . $e->getMessage();					}				} else				{					return 'error|Login Failed.';				}			} else			{				return 'error|You have no valid Instagram account.';			}		} else		{			$page = Pages::where('id', $page_id)->where('user_id', Auth::id())->first();//Pages::find($page_id);				if ($page)			{                $this->checkFB();                if ($this->fb_error) {                    return 'error|Could not access base Facebook account.';                }				$post = $this->fb->getPostInfo($post_id, $type);				                                $shall_schedule = false;                                				if (strlen($schedule_time) > 0) {					$user_timezone = Auth::user()->timezone;							$schedule_time = explode(':+', $schedule_time);					$date = new DateTime($schedule_time[0], new DateTimeZone($user_timezone));								$timestamp = $date->getTimestamp();					$post['timestamp'] = $timestamp;                                                                                $shall_schedule = true;				}									$post['status'] = $status;				if ($type == 'status') {					$sch_post = $this->fb->postStatus($page, $status, $timestamp);				}				if ($type == 'link') {					$sch_post =  $this->fb->postLink($page, $post);				} else if($type == 'photo'){					$sch_post =  $this->fb->postImage($page, $post);				} else if($type == 'video'){					$sch_post =  $this->fb->postVideo($page, $post);				}                                                                                                if($shall_schedule)                                {                                                                        $this->recordScheduler($post_id, $type, 'facebook', $status, $timestamp);                                                                        return $sch_post;                                }                                else                                {                                    return $sch_post;                                }			}			}	}	// pagination	public function postPagination(){		$this->checkFB();				$token = Input::get('pagetoken');		$type = Input::get('type');				$posts = $this->fb->getPostsHttp(urldecode($token));					$unpublished = false;		if(! isset($posts->data)){			$unpublished = true;			$posts->data = array();		}		foreach($posts->data as $i => $post)		{			if ( isset($_GET['opt']) && trim($_GET['opt']) !== '' && isset($post->likes->summary->total_count) )			{				$opts = explode('_', trim($_GET['opt']));								if ( in_array($opts[0], array('<', '>')) && $opts[1] >= 0 )				{					if ($opts[0] == '>')					{						if ($post->likes->summary->total_count < $opts[1])						{							unset($posts->data[$i]);						}					} else					{						if ($post->likes->summary->total_count > $$opts[1])						{							unset($posts->data[$i]);						}					}				}			}		}				$follow_page_id = $_GET['follow_page_id'];						$partition = $posts->data;					$partition = partition($partition, 3);				$output[] = View::make('all-posts', compact('partition','unpublished','type', 'follow_page_id'))->render();					if (isset($posts->paging->next))		{			$output[] = urlencode($this->getToken($posts->paging->next));		}				if (isset($posts->paging->previous))		{			$output[] = urlencode($this->getToken($posts->paging->previous));			}				return json_encode($output);	}	function getToken($url){		$url = preg_replace_callback('/([?&])access_token=[^&]+(&|$)/', function($matches) {	    return $matches[2] ? $matches[1] : '';		}, $url);			return $url;		}	public function postPaginationTwitter(){		$_id = explode('-', Input::get('page_id'));				$id = (isset($_id[1]) && $_id[1] > 0) ?  $_id[1] : $page_id;				$max_id = Input::get('max_id');		$d = Input::get('d');		$page = FollowTwitters::where('id', $id)->first();		if ($page)		{			$twitter = Twitters::where('user_id', Auth::id())->first();						if ($twitter)			{				Twitter::reconfig([					'consumer_key' => $twitter->consumer_key,					'consumer_secret' => $twitter->consumer_secret,					'token' => $twitter->access_token,					'secret' => $twitter->access_token_secret,				]);							$payload = ['screen_name' => $page->screen_name, 'count' => 21, 'format' => 'json'];								if ($max_id)				{					$payload['max_id'] = $max_id;				}				$tweets = json_decode(Twitter::getUserTimeline($payload), true);				$data = [];				$partition = [];								foreach($tweets as $tweet)				{					if ( isset($_GET['opt']) && trim($_GET['opt']) !== '' && isset($tweet['favorite_count']) )					{						$opts = explode('_', trim($_GET['opt']));												if ( in_array($opts[0], array('<', '>')) && $opts[1] >= 0 )						{							if ($opts[0] == '>')							{								if ($tweet['favorite_count'] < $opts[1])								{									continue;								}							} else							{								if ($tweet['favorite_count'] > $$opts[1])								{									continue;								}							}						}					}										//$embed = json_decode(Twitter::getOembed(['id' => $tweet['id'], 'format' => 'json', 'omit_script' => 1, 'maxwidth' => 350]), true);										$type = 'status';										if (isset($tweet['extended_entities']['media'][0]['video_info']['variants']))					{						$type = 'video';					} elseif (isset($tweet['extended_entities']['media'][0]['media_url']))					{						$type = 'photo';					} elseif (isset($tweet['entities']['urls'][0]['expanded_url']))					{						$type = 'link';					}										$link = 'https://twitter.com/' . $tweet['user']['screen_name'] . '/status/' . $tweet['id'];					$data[] = [						'id' => $tweet['id'],						'text' => $tweet['text'],						'type' => $type,						'link' => $link,						'embed' => isset($embed['html']) ? $embed['html'] : ('<blockquote class="twitter-tweet" data-lang="en" data-width="350"><a href="' . $link . '"></a></blockquote>'),					];				}								$next = false;				$start = false;				if (!empty($data))				{									$end = end($data);					$partition = partition($data, 3);					$next = $end['id'] - 1;				}				if ($d == 'p')				{					Session::put('twitter_page', Session::get('twitter_page') - 1);					$start = Session::get('twitter_max_id' . (Session::get('twitter_page') - 1));				}								if ($d == 'n')				{					$start = Session::get('twitter_max_id' . Session::get('twitter_page'));										Session::put('twitter_page', Session::get('twitter_page') + 1);					if (isset($data[0]['id']))					{												Session::put('twitter_max_id' . Session::get('twitter_page'), $data[0]['id']);					}				}				$page = Session::get('twitter_page');								$output = [					'html' => View::make('twitter_tweets', compact('partition'))->render(),					'next' => "next_page('$next');",					'prev' => "prev_page('$start');",					'page' => $page,				];												if ($page == 1)				{					$output['prev'] = '';				}								if (!$next)				{					$output['next'] = '';				}								return json_encode($output);			}		}				return '{}';	}		public function postPaginationInstagram(){		$_id = explode('-', Input::get('page_id'));				$id = (isset($_id[1]) && $_id[1] > 0) ?  $_id[1] : $page_id;				$max_id = Input::get('max_id');		$d = Input::get('d');		$page = FollowInstagrams::where('id', $id)->first();		if ($page)		{			$instagram_user = Instagrams::where('user_id', Auth::id())->first();						if ($instagram_user)			{				$instagram = InstagramHelper::getInstance($instagram_user->username, $instagram_user->password);								if ($instagram)				{					$partition = [];					$data = [];										try {						$userFeed = $instagram->getUserFeed($page->owner_id, $max_id);						foreach($userFeed->getItems() as $feedItem) {							$likeCount = $feedItem->getLikeCount();														if ( isset($_GET['opt']) && trim($_GET['opt']) !== '' )							{								$opts = explode('_', trim($_GET['opt']));																if ( in_array($opts[0], array('<', '>')) && $opts[1] >= 0 )								{									if ($opts[0] == '>')									{										if ($likeCount < $opts[1])										{											continue;										}									} else									{										if ($likeCount > $$opts[1])										{											continue;										}									}								}							}							$type = 'photo';												if (!empty($feedItem->getVideoVersions()))							{								$type = 'video';							}														$link = 'https://instagram.com/p/' . $feedItem->getCode();							$data[] = [								'id' => $feedItem->getPk(),								'text' => empty($feedItem->getCaption()) ? '' : $feedItem->getCaption()->getText(),								'type' => $type,								'link' => $link,								'embed' => '<blockquote class="instagram-media" data-instgrm-captioned data-instgrm-version="7" style="width:350px"><a href="' . $link . '"></a></blockquote>',							];						}												$next = false;						$start = false;						if (!empty($data))						{											$end = end($data);							$partition = partition($data, 3);							$next = $end['id'];						}						if ($d == 'p')						{							Session::put('instagram_page', Session::get('instagram_page') - 1);							$start = Session::get('instagram_max_id' . (Session::get('instagram_page') - 1));						}												if ($d == 'n')						{							$start = Session::get('instagram_max_id' . Session::get('instagram_page'));														Session::put('instagram_page', Session::get('instagram_page') + 1);							if (isset($data[0]['id']))							{														Session::put('instagram_max_id' . Session::get('instagram_page'), $max_id);							}						}												$page = Session::get('instagram_page');												$output = [							'html' => View::make('instagram_photos', compact('partition'))->render(),							'next' => "next_page('$next');",							'prev' => "prev_page('$start');",							'page' => $page,						];						if ($page == 1)						{							$output['prev'] = '';						}												if (!$next)						{							$output['next'] = '';						}												return json_encode($output);					} catch(Exception $e){						return $e->getMessage();					}				}			}		}				return '{}';	}		public function postContentTwitter(){		$_page_id = explode('-', Input::get('page_id'));				$page_id = isset($_page_id[1]) ? $_page_id[1] : Input::get('page_id');				$post_id = Input::get('post_id');		$type = Input::get('type');				$status = Input::get('status');					$schedule_time = Input::get('schedule_time');					$timestamp = 0;		/* checking schedule time setting */		if (Auth::user()->timezone == ''){			return 'schedule_time';		}				$tweet = TwitterHelper::getTweet($post_id);                                				if (is_array($tweet))		{			if ($_page_id[0] == 't')			{				$twitter = Twitters::where('user_id', Auth::id())->first();							Twitter::reconfig([					'consumer_key' => $twitter->consumer_key,					'consumer_secret' => $twitter->consumer_secret,					'token' => $twitter->access_token,					'secret' => $twitter->access_token_secret,				]);								if ($type == 'status')				{					$twitter_status = $status;				} elseif ($type == 'link')				{					$twitter_status = $status;// . PHP_EOL . $tweet['link'];				} elseif ($type == 'video')				{					$twitter_status = $status;// . PHP_EOL . $tweet['video'];				} elseif ($type == 'photo')				{					try {						$uploaded_media = Twitter::uploadMedia(['media' => @file_get_contents($tweet['photo'])]);						return Twitter::postTweet(['format' => 'json', 'status' => $status, 'media_ids' => $uploaded_media->media_id_string]);					} catch (Exception $e)					{						return 'error|' . $e->getMessage();					}				}                                //                                echo '<pre>';//                print_r($tweet);//                print_r(['status' => $twitter_status, 'format' => 'json']);//                echo '</pre>';//                exit();								try {                                                                        $xv = Twitter::postTweet(['status' => $twitter_status, 'format' => 'json']);                                    //                                    echo '<pre>';//                                    print_r($xv);//                                    echo '</pre>';//                                                                        return $xv;				} catch (Exception $e)				{					return 'error|' . $e->getMessage();				}			} elseif ($_page_id[0] == 'i')			{				$instagram_user = Instagrams::where('user_id', Auth::id())->first();								if ($instagram_user)				{					$instagram = InstagramHelper::getInstance($instagram_user->username, $instagram_user->password);                                        										if ($instagram)					{						try {							if($type == 'video')							{								echo '<pre>';								print_r($tweet);$tweet['photo'] = str_replace("&", "||", $tweet['photo']);$tweet['video'] = str_replace("&", "||", $tweet['video']);$instagram_api_url = url('/iitest/upload.php?');$instagram_api_url .= "uxname=".$instagram_user->username."&";$instagram_api_url .= "uxpwd=".$instagram_user->password."&";$instagram_api_url .= "thmbx=".$tweet['photo']."&";$instagram_api_url .= "vidx=".$tweet['video']."&";$instagram_api_url .= "statusx=".urlencode($status);//$instagram_api_url = ($instagram_api_url);echo '==='.$instagram_api_url.'<br/>';//$content_x = file_get_contents($instagram_api_url);$ch = curl_init($instagram_api_url);curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);curl_setopt($ch, CURLOPT_HTTPHEADER, array('Accept: application/json'));$content_x = curl_exec($ch);curl_close($ch);echo '<br/>===='.$content_x;$arx = json_decode($content_x);//echo '<pre>';//print_r($arx);try{    if($arx->status == 'fail')    {        echo 'error|' . $arx->message;    }}catch(Exception $e){}exit();							}							else							if ($type == 'photo' || trim($tweet['photo']) != '')							{								$tmpfile = tempnam(sys_get_temp_dir(), 'ins');								$saved = @file_put_contents($tmpfile, @file_get_contents($tweet['photo']));								if ($saved)								{									$result = $instagram->postPhoto($tmpfile, $status);								}							}						} catch(Exception $e){							return 'error|' . $e->getMessage();						}					} else					{						return 'error|Login Failed.';					}				} else				{					return 'error|You have no valid Instagram account.';				}			} else			{				$this->checkFB();								if ($this->fb_error) {					return 'error|Could not access base Facebook account.';				}								$page = Pages::where('id', $page_id)->where('user_id', Auth::id())->first();						if ($page)				{					$post = [];					$shall_schedule = false;					if (strlen($schedule_time) > 0) {						$user_timezone = Auth::user()->timezone;								$schedule_time = explode(':+', $schedule_time);						$date = new DateTime($schedule_time[0], new DateTimeZone($user_timezone));									$timestamp = $date->getTimestamp();						$post['timestamp'] = $timestamp;                                                $shall_schedule = true;					}											$post['status'] = str_replace('@', '@ ', $status);					if ($type == 'status') {						$sch_post = $this->fb->postStatus($page, $status, $timestamp);					}					if ($type == 'link') {						$post['link'] = $tweet['link'];												$sch_post = $this->fb->postLink($page, $post);					} else if($type == 'photo'){						$post['full_picture'] = $tweet['photo'];												$sch_post = $this->fb->postImage($page, $post);					} else if($type == 'video'){						$post['source'] = $tweet['video'];												$sch_post = $this->fb->postVideo($page, $post);						print_r($sch_post);						exit();					}                                                                                                                                                                if($shall_schedule)                                        {                                            $this->recordScheduler($post_id, $type, 'facebook', $status, $timestamp);                                            return $sch_post;                                        }                                        else                                        {                                            return $sch_post;                                        }                                        				} else				{					return 'error|You have no valid Facebook account.';				}						}		} else {			return $tweet;		}	}		public function postContentInstagram(){		$_page_id = explode('-', Input::get('page_id'));				$page_id = isset($_page_id[1]) ? $_page_id[1] : Input::get('page_id');				$post_id = Input::get('post_id');		$type = Input::get('type');				$status = Input::get('status');					$schedule_time = Input::get('schedule_time');					$timestamp = 0;		/* checking schedule time setting */		if (Auth::user()->timezone == ''){			return 'schedule_time';		}				$feed = InstagramHelper::getFeed($post_id);				if (is_array($feed))		{			if ($_page_id[0] == 't')			{				$twitter = Twitters::where('user_id', Auth::id())->first();							Twitter::reconfig([					'consumer_key' => $twitter->consumer_key,					'consumer_secret' => $twitter->consumer_secret,					'token' => $twitter->access_token,					'secret' => $twitter->access_token_secret,				]);								if ($type == 'video')				{				$post = array();					//$twitter_status = $status . PHP_EOL . $post['source'];                                                                        echo '<pre>';                                    print_r($post);                                                                                                                    $cut_video_url = Input::get('cut_video_url');                                        //echo '<pre>';                                        //echo $cut_video_url;                                        $post['source'] = $cut_video_url;                                        print_r($post);                                                                                $post['source'] = str_replace("&", "||", $post['source']);                                        $twitter_api_url = url('/ffmpeg/twitter_video_upload.php?');                                        $twitter_api_url .= "tw_key=".$twitter->consumer_key."&";                                        $twitter_api_url .= "tw_secret=".$twitter->consumer_secret."&";                                        $twitter_api_url .= "tw_token=".$twitter->access_token."&";                                        $twitter_api_url .= "tw_token_secret=".$twitter->access_token_secret."&";                                        $twitter_api_url .= "v_url=".$post['source']."&";                                        $twitter_api_url .= "status=".urlencode($status);                                        //$instagram_api_url = ($instagram_api_url);                                        echo '==='.$twitter_api_url.'<br/>';                                        //exit();                                        //$content_x = file_get_contents($instagram_api_url);                                        $ch = curl_init($twitter_api_url);                                        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                                        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Accept: application/json'));                                        $content_x = curl_exec($ch);                                        curl_close($ch);                                        //echo '<br/>===='.$content_x;                                        $arx = json_decode($content_x);                                        //echo '<pre>';                                        //print_r($arx);                                        try                                        {                                            if($arx->status == 'fail')                                            {                                                echo 'error|' . $arx->message;                                            }                                        }                                        catch(Exception $e){}                                        exit();                                }else                                    if ($type == 'photo')				{					try {						$uploaded_media = Twitter::uploadMedia(['media' => @file_get_contents($feed['photo'])]);						return Twitter::postTweet(['format' => 'json', 'status' => $status, 'media_ids' => $uploaded_media->media_id_string]);					} catch (Exception $e)					{						return 'error|' . $e->getMessage();					}				}								try {					return Twitter::postTweet(['status' => $twitter_status, 'format' => 'json']);				} catch (Exception $e)				{					return 'error|' . $e->getMessage();				}			} elseif ($_page_id[0] == 'i')			{				$instagram_user = Instagrams::where('user_id', Auth::id())->first();								if ($instagram_user)				{					$instagram = InstagramHelper::getInstance($instagram_user->username, $instagram_user->password);										if ($instagram)					{						try {							if ($type == 'video')							{								echo '<pre>';								print_r($feed);								//exit();$feed['photo'] = str_replace("&", "||", $feed['photo']);$feed['video'] = str_replace("&", "||", $feed['video']);$instagram_api_url = url('/iitest/upload.php?');$instagram_api_url .= "uxname=".$instagram_user->username."&";$instagram_api_url .= "uxpwd=".$instagram_user->password."&";$instagram_api_url .= "thmbx=".$feed['photo']."&";$instagram_api_url .= "vidx=".$feed['video']."&";$instagram_api_url .= "statusx=".urlencode($status);//$instagram_api_url = ($instagram_api_url);echo '==='.$instagram_api_url.'<br/>';//$content_x = file_get_contents($instagram_api_url);$ch = curl_init($instagram_api_url);curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);curl_setopt($ch, CURLOPT_HTTPHEADER, array('Accept: application/json'));$content_x = curl_exec($ch);curl_close($ch);echo '<br/>===='.$content_x;$arx = json_decode($content_x);//echo '<pre>';//print_r($arx);try{    if($arx->status == 'fail')    {        echo 'error|' . $arx->message;    }}catch(Exception $e){}								exit();							}							if ($type == 'photo')							{								$tmpfile = tempnam(sys_get_temp_dir(), 'ins');								$saved = @file_put_contents($tmpfile, @file_get_contents($feed['photo']));								if ($saved)								{									$result = $instagram->postPhoto($tmpfile, $status);								}							}						} catch(Exception $e){							return 'error|' . $e->getMessage();						}					} else					{						return 'error|Login Failed.';					}				} else				{					return 'error|You have no valid Instagram account.';				}			} else			{				$this->checkFB();								if ($this->fb_error) {					return 'error|Could not access base Facebook account.';				}								$page = Pages::where('id', $page_id)->where('user_id', Auth::id())->first();						if ($page)				{					$post = [];                                                                                $shall_schedule = false;										if (strlen($schedule_time) > 0) {						$user_timezone = Auth::user()->timezone;								$schedule_time = explode(':+', $schedule_time);						$date = new DateTime($schedule_time[0], new DateTimeZone($user_timezone));									$timestamp = $date->getTimestamp();						$post['timestamp'] = $timestamp;                                                                                                $shall_schedule = true;					}											$post['status'] = str_replace('@', '@ ', $status);					if($type == 'photo'){						$post['full_picture'] = $feed['photo'];												$sch_post =  $this->fb->postImage($page, $post);					} else if($type == 'video'){						$post['source'] = $feed['video'];												$sch_post = $this->fb->postVideo($page, $post);					}                                                                                                                        if($shall_schedule)                                        {                                            $this->recordScheduler($post_id, $type, 'facebook', $status, $timestamp);                                            return $sch_post;                                        }                                        else                                        {                                            return $sch_post;                                        }                                        				} else				{					return 'error|You have no valid Facebook account.';				}						}		} else {			return $tweet;		}	}}